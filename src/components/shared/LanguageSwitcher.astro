---
const currentLocale = Astro.url.pathname.startsWith("/uz") ? "uz" : "ru";
const newPath = Astro.url.pathname.replace(/^\/uz/, "");
const ruPath = newPath || "/";
const uzPath = `/uz${newPath}`;

// Генерируем уникальный идентификатор для каждого экземпляра компонента
const instanceId = Math.random().toString(36).substring(2, 10);
---

<div class="relative language-switcher" data-instance-id={instanceId}>
  <!-- Кнопка -->
  <button
    class="w-20 lang-toggle bg-transparent flex justify-between items-center gap-1 lg:py-1 lg:px-3 lg:w-auto"
  >
    <span class="selected-lang text-sm text-white"
      >{currentLocale === "ru" ? "Русский" : "O'zbekcha"}</span
    >
    <svg
      class="w-3 h-3"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke="white"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>

  <!-- Выпадающий список -->
  <ul
    class="lang-menu absolute w-fit mt-2 rounded-lg overflow-hidden
    bg-white/20 dark:bg-black/30 backdrop-blur-md
    border border-white/20 dark:border-white/10
    shadow-lg opacity-0 invisible transform -translate-y-3
    transition-all ease-out"
  >
    <li
      class="ru-option px-4 py-1 cursor-pointer border-b border-white/20 dark:border-white/10
      hover:bg-white/80 dark:hover:bg-black/70 transition-colors"
    >
      Русский
    </li>
    <li
      class="uz-option px-4 py-1 cursor-pointer
      hover:bg-white/80 dark:hover:bg-black/70 transition-colors"
    >
      O'zbekcha
    </li>
  </ul>
</div>

<script define:vars={{ ruPath, uzPath, instanceId }}>
  document.addEventListener("DOMContentLoaded", function () {
    const container = document.querySelector(
      `.language-switcher[data-instance-id="${instanceId}"]`
    );

    if (!container) return;

    const toggleButton = container.querySelector(".lang-toggle");
    const langMenu = container.querySelector(".lang-menu");
    const ruOption = container.querySelector(".ru-option");
    const uzOption = container.querySelector(".uz-option");

    function toggleDropdown() {
      if (langMenu) {
        // Плавное появление/исчезновение
        if (langMenu.classList.contains("opacity-0")) {
          // Показываем меню
          langMenu.classList.remove("opacity-0", "invisible", "-translate-y-3");
          langMenu.classList.add("opacity-100", "translate-y-0");
        } else {
          // Скрываем меню
          langMenu.classList.remove("opacity-100", "translate-y-0");
          langMenu.classList.add("opacity-0", "invisible", "-translate-y-3");
        }
      }
    }

    // Добавляем обработчик для кнопки
    if (toggleButton) {
      toggleButton.addEventListener("click", (e) => {
        e.stopPropagation();
        toggleDropdown();
      });
    }

    // Добавляем обработчики для вариантов языка
    if (ruOption) {
      ruOption.addEventListener("click", () => {
        window.location.href = ruPath;
      });
    }

    if (uzOption) {
      uzOption.addEventListener("click", () => {
        window.location.href = uzPath;
      });
    }

    // Закрываем меню при клике вне его
    document.addEventListener("click", (event) => {
      if (
        langMenu &&
        langMenu.classList.contains("opacity-100") &&
        !langMenu.contains(event.target) &&
        toggleButton &&
        !toggleButton.contains(event.target)
      ) {
        // Скрываем меню
        langMenu.classList.remove("opacity-100", "translate-y-0");
        langMenu.classList.add("opacity-0", "invisible", "-translate-y-3");
      }
    });
  });
</script>
